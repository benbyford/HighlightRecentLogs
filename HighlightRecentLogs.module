<?php

/**
 * HighlightRecentLogs
 * @author Ben Byford
 *
 * ProcessWire 2.x
 * Copyright (C) 2010 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 *
 */

class HighlightRecentLogs extends WireData implements Module {
	
	public static function getModuleInfo() {
		return array(
			'title'     => 'Highlights very recently changed logs on the logs list page',
			'version'   => 101,
			'summary'   => "Highlights very recently changed logs on the logs list page",
			'href'      => 'https://www.benbyford.com',
			'author'    => 'bbyford',
			'singular'  => true,
			'autoload'  => true
		);
	}

    public function init(){
        $this->addHookAfter('ProcessLogger::execute', function($event){
                
            /** @var MarkupAdminDataTable $table */
            $table = $this->wire('modules')->get('MarkupAdminDataTable'); 
            $table->setEncodeEntities(false);
            $table->headerRow(array(
                $this->_x('Name', 'th'),
                $this->_x('Modified', 'th'), 
                $this->_x('Entries', 'th'), 
                $this->_x('Size', 'th'),
            ));
            
            $logs = $this->wire()->log->getLogs();

            foreach($logs as $log) {
                
                // add highlight
                $now = time();
                $logModified = $log['modified'];

                $class = "log-hl-5";
                if($now - $logModified < 60) {
                    $class = "log-hl-1";
                }elseif($now - $logModified < 3600){
                    $class = "log-hl-2";
                }elseif($now - $logModified < 86400){
                    $class = "log-hl-3";
                }elseif($now - $logModified < 604800){
                    $class = "log-hl-4";
                }

                $logName = $log['name'];
                if(ctype_digit($logName)) $logName = " $logName";
                $table->row(
                    array(
                        $logName => "./view/$log[name]/", 
                        "<span style='font-size: 0;'>{$logModified} </span>" . wireRelativeTimeStr($logModified),
                        $this->wire()->log->getTotalEntries($log['name']),
                        "<span style='font-size: 0;'>$log[size] </span>" . wireBytesStr($log['size'])
                    ),
                    array("class"=>$class)
                );
            }
            $cnt = count($logs); 
            $out = 
                "<h2><i class='fa fa-lg fa-fw fa-tree'></i> " . sprintf($this->_n('%d log', '%d logs', $cnt), $cnt) . "</h2>" . 
                $table->render() . 
                "<p>" . 
                "<span class='detail'>" . $this->_('Create or add to log file from the API:') . "</span><br />" . 
                "<code class='notes'>wire('log')->save('name', 'entry text');</code>" . 
                "</p>";

            $out .= "
            <style>
                .log-hl-1{
                    border-bottom: 1px solid #ff6361;
                    background: #ff636166;
                }
                .log-hl-2{
                    border-bottom: 1px solid #bc5090;
                    background: #bc509033;
                }
                .log-hl-3{
                    border-bottom: 1px solid #58508d;
                    background: #58508d22;
                }
                .log-hl-4{
                    border-bottom: 1px solid #003f5c;
                    background: #003f5c11;
                }
                .log-hl-5{
                    border-bottom: 1px solid #cccccc;
                    background: #cccccc11;
                }
            </style>
            ";

            $event->return = $out;
        });
    } 
}